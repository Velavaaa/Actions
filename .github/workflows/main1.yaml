---
name: Platform GitHub Actions CI
"on": [push]
defaults:
  run:
    shell: bash
jobs:
  validate-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Validate YAML files
        run: >
          yamllint --strict --config-data "{extends: default, rules: {line-length: disable}}" .
    timeout-minutes: 10
  validate-actions:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Validate GitHub Actions
        uses: docker://rhysd/actionlint@sha256:3f24bf9d72ca67af6f9f8f3cc63b0e24621b57bf421cecfc452c3312e32b68cc
        with:
          args: -color
    timeout-minutes: 10
  validate-branch-refs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Validate branch references
        env:
          REPO_OWNER: ${{ github.event.repository.owner.name }}
          REPO_NAME: ${{ github.event.repository.name }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          readonly TITLE='Non-default branch reference'
          readonly MESSAGE='A reference to a non-default branch has been found. Make sure to update it before completing the merge:'

          while IFS=: read -r filename lineno _uses ref; do
            echo "::error file=${filename},line=${lineno},title=${TITLE}::${MESSAGE}${ref}"
            fail=true
          done < <(
            grep -nER "${REPO_OWNER}/${REPO_NAME}/.github/.+@" . | grep -v "@${DEFAULT_BRANCH}$"
          )

          [[ "${fail}" == true ]] && exit 1 || exit 0
    timeout-minutes: 10
  validate-final-job-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Validate dependencies of the final job
        run: |
          readonly TITLE='Missing dependencies in the final job'
          readonly MESSAGE="Ensure all jobs are dependencies of 'final'. See job output for details."

          readonly WORKFLOWS=(
            .github/workflows/ci.yml
            .github/workflows/single-tenant.yml
          )

          for workflow in "${WORKFLOWS[@]}"; do
            jobs="$(yq '.jobs | keys | .[]' "${workflow}" | grep -v '^final$' | sort)"
            deps="$(yq '.jobs.final.needs[]' "${workflow}" | sort)"
            deps_lineno="$(yq '.jobs.final.needs | line' "${workflow}")"

            if result="$(diff -y <(printf "%s\n" "${jobs}") <(printf "%s\n" "${deps}"))"; then
              echo "${workflow} is valid"
            else
              echo "${workflow} is invalid:"
              echo "${result}"
              echo "::ERROR file=${workflow},line=${deps_lineno},title=${TITLE}::${MESSAGE}"
              fail=true
            fi
            echo "---"
          done

          [[ "${fail}" == true ]] && exit 1 || exit 0
    timeout-minutes: 10
