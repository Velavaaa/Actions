---
name: Platform Single-Tenant App CI/CD
"on":
  workflow_call:
    inputs:
      upstream_repo:
        required: false
        type: string
      upstream_branch:
        required: false
        type: string
      upstream_default_branch:
        required: false
        type: string
env:
  REMOTE_MODULE_PREFIX_GITHUB: https://PLATFORM_CI_CLOUD_TOKEN:${{ secrets.PLATFORM_CI_GITHUB_PULL_TOKEN }}
defaults:
  run:
    shell: bash
jobs:
  validate-charts:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Install chartgardener
        uses: uniphore/platform-github-actions/.github/actions/setup-chartgardener@main
        with:
          github-token: ${{ secrets.PLATFORM_CI_GITHUB_PULL_TOKEN }}
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          token: ${{ secrets.PLATFORM_CI_GITHUB_PULL_TOKEN }}
      - name: Set up Garden
        id: garden
        uses: uniphore/platform-github-actions/.github/actions/setup-garden@main
        with:
          aws-cluster-arn: ${{ vars.PLATFORM_CI_AWS_CLUSTER_ARN }}
          aws-iam-oidc-role-arn: ${{ vars.PLATFORM_CI_AWS_IAM_OIDC_ROLE_ARN }}
          aws-region: ${{ vars.PLATFORM_CI_AWS_REGION }}
          github-token: ${{ secrets.PLATFORM_CI_GITHUB_PULL_TOKEN }}
      - name: Update upstream branch
        if: ${{ inputs.upstream_repo }}
        env:
          UPSTREAM_REPO: ${{ inputs.upstream_repo }}
          UPSTREAM_BRANCH: ${{ inputs.upstream_branch }}
        run: |
          shopt -s extglob
          sed -ri "/^\s+repositoryUrl:/ s~${UPSTREAM_REPO}.git.*~${UPSTREAM_REPO}.git#${UPSTREAM_BRANCH}~" project.garden.y?(a)ml
          cat project.garden.y?(a)ml
      - name: Update Garden remote sources
        env:
          NAMESPACE: ${{ steps.garden.outputs.namespace }}
        run: garden update-remote all --env="${NAMESPACE}.build" --show-timestamps
      - name: Show Garden status
        env:
          NAMESPACE: ${{ steps.garden.outputs.namespace }}
        run: garden get status --env="${NAMESPACE}.build" --show-timestamps
      - name: Validate charts
        run: |
          if [[ ! -f chartgardener.yml ]]; then
            echo "::ERROR::chartgardener.yml file not found! Please check the hello-world templates for reference."
            exit 1
          fi

          CHARTGARDENER_LOG="${RUNNER_TEMP}/chartgardener_${GITHUB_RUN_ID}.log"
          chartgardener --action validate --log-level=INFO | tee "${CHARTGARDENER_LOG}" || fail=true

          while read -r severity && read -r message; do
            if [[ "${severity}" == 'WARNING' || "${severity}" == 'ERROR' ]]; then
              echo "::${severity}::${message}"
            fi
          done < <(awk -F' - ' '{print $3; print $4}' "${CHARTGARDENER_LOG}")

          if [[ "${fail}" == true ]]; then
            exit 1
          fi
      - name: Debug mode
        if: failure() || runner.debug && always()
        uses: uniphore/platform-github-actions/.github/actions/debug@main
    timeout-minutes: 60
  build-charts:
    if: >
      ! startsWith(github.event.head_commit.message, '[github-ci]')
      && ((github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch))
          || (github.event_name == 'workflow_dispatch' && inputs.upstream_branch == inputs.upstream_default_branch))
    needs: validate-charts
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    outputs:
      name: ${{ steps.build.outputs.name }}
      version: ${{ steps.build.outputs.version }}
    steps:
      - name: Set up Git
        uses: uniphore/platform-github-actions/.github/actions/setup-git@main
      - name: Install chartgardener
        uses: uniphore/platform-github-actions/.github/actions/setup-chartgardener@main
        with:
          github-token: ${{ secrets.PLATFORM_CI_GITHUB_PULL_TOKEN }}
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          token: ${{ secrets.platform_ci_github_push_token }}
      - name: Set up Garden
        id: garden
        uses: uniphore/platform-github-actions/.github/actions/setup-garden@main
        with:
          aws-cluster-arn: ${{ vars.PLATFORM_CI_AWS_CLUSTER_ARN }}
          aws-iam-oidc-role-arn: ${{ vars.PLATFORM_CI_AWS_IAM_OIDC_ROLE_ARN }}
          aws-region: ${{ vars.PLATFORM_CI_AWS_REGION }}
          github-token: ${{ secrets.PLATFORM_CI_GITHUB_PULL_TOKEN }}
      - name: Update Garden remote sources
        env:
          NAMESPACE: ${{ steps.garden.outputs.namespace }}
        run: garden update-remote all --env="${NAMESPACE}.build" --show-timestamps
      - name: Show Garden status
        env:
          NAMESPACE: ${{ steps.garden.outputs.namespace }}
        run: garden get status --env="${NAMESPACE}.build" --show-timestamps
      - name: Build charts
        id: build
        env:
          GITHUB_SHA: ${{ github.sha }}
          # Chart repository credentials required for chartgardener authentication
          OCI_REGISTRY_HOST: ${{ vars.platform_oci_registry_host }}
          OCI_REGISTRY_USER: ${{ vars.platform_oci_registry_user }}
          OCI_REGISTRY_PASSWORD: ${{ secrets.platform_oci_registry_password }}
        run: |
          shopt -s extglob

          version_hash="v$(echo "${GITHUB_SHA}" | cut -c1-8)"

          chartgardener --action=all --release --chart-version-hash="${version_hash}" --log-level=INFO

          path="$(git diff --name-only | grep Chart.yaml)"
          name="$(yq .name "${path}")"
          version="$(yq .version "${path}")"
          echo "Chart name: ${name}"
          echo "Chart version: ${version}"
          [[ -n "${name}" && -n "${version}" ]]

          git diff
          git add -A
          git restore --staged project.garden.y?(a)ml  # Do not commit injected configuration
          git diff-index --quiet HEAD || git commit -m "[github-ci] Build ${name} charts with version ${version}"
          git push

          echo "name=${name}" >> "${GITHUB_OUTPUT}"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
      - name: Debug mode
        if: failure() || runner.debug && always()
        uses: uniphore/platform-github-actions/.github/actions/debug@main
    timeout-minutes: 60
  deploy:
    if: needs.build-charts.outputs.name
    needs: build-charts
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git
        uses: uniphore/platform-github-actions/.github/actions/setup-git@main
      - name: Install chartgardener
        uses: uniphore/platform-github-actions/.github/actions/setup-chartgardener@main
        with:
          github-token: ${{ secrets.PLATFORM_CI_GITHUB_PULL_TOKEN }}
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.event.repository.default_branch }}
          token: ${{ secrets.platform_ci_github_push_token }}
      - name: Deploy via Flux
        env:
          APP_NAME: ${{ needs.build-charts.outputs.name }}
          APP_VERSION: ${{ needs.build-charts.outputs.version }}
          SLACK_WEBHOOK: ${{ secrets.platform_ci_slack_webhook }}
        run: |
          shopt -s extglob
          shopt -s nullglob

          readonly APP_RELEASE_PATH="deploy/base/release.y?(a)ml"

          exists() { [[ -f $1 ]]; }

          # shellcheck disable=SC2086
          if ! exists ${APP_RELEASE_PATH}; then
            echo "::ERROR::Missing Kustomize base overlay: ${APP_RELEASE_PATH} not found"
            exit 1
          fi

          # shellcheck disable=SC2086
          yq -i '.spec.chart.spec.version=env(APP_VERSION)' ${APP_RELEASE_PATH}

          commit_message="[github-ci] ${APP_NAME} incremented to chart=${APP_VERSION}"
          slack_message="${APP_NAME} deployed chart=${APP_VERSION}"
          github_message=":rocket: ${APP_NAME} has been sucessfully deployed! chart=${APP_VERSION}"

          git diff
          git add -A
          git diff-index --quiet HEAD || git commit -m "${commit_message}"
          git push

          chartgardener --action=notification --slack-url="${SLACK_WEBHOOK}" --message="${slack_message}"
          echo "${github_message}" >> "${GITHUB_STEP_SUMMARY}"
      - name: Debug mode
        if: failure() || runner.debug && always()
        uses: uniphore/platform-github-actions/.github/actions/debug@main
    timeout-minutes: 60
  final:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - validate-charts
      - build-charts
      - deploy
    permissions:
      actions: read
      id-token: write
    steps:
      - name: Clean up cluster resources
        uses: uniphore/platform-github-actions/.github/actions/teardown-cluster@main
        with:
          aws-cluster-arn: ${{ vars.PLATFORM_CI_AWS_CLUSTER_ARN }}
          aws-iam-oidc-role-arn: ${{ vars.PLATFORM_CI_AWS_IAM_OIDC_ROLE_ARN }}
          aws-region: ${{ vars.PLATFORM_CI_AWS_REGION }}
      - name: Validate workflow conclusion
        uses: uniphore/platform-github-actions/.github/actions/workflow-conclusion@main
      - name: Debug mode
        if: failure() || runner.debug && always()
        uses: uniphore/platform-github-actions/.github/actions/debug@main
    timeout-minutes: 60
